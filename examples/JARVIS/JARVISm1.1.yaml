flow:
  _target_: aiflows.ControllerExecutorFlowModule.ControllerExecutorFlow.instantiate_from_default_config
  max_rounds: 30

  ### Subflows specification
  subflows_config:
    Controller:
      _target_: aiflows.ControllerExecutorFlowModule.ControllerAtomicFlow.instantiate_from_default_config
      commands:
        run_python_code:
          description: "Call a python function which is written in a py file whose contents are here attached"
          input_args: [ "called_function","kwargs" ]
        finish:
          description: "Signal that the objective has been satisfied, and returns the answer to the user."
          input_args: [ "answer" ]
      backend:
        api_infos: ???
      output_interface:
        - 'thought'
        - 'reasoning'
        - 'plan'
        - 'criticism'
        - 'speak'
        - 'command'
        - 'command_args'

      #######################################################
      # ToDo: Some parts of the prompt don't make sense -- update them
      system_message_prompt_template:
        _target_: langchain.PromptTemplate
        template: |2-
          You are a smart AI assistant. 
          
          Your decisions must always be made independently without seeking user assistance.
          Play to your strengths as an LLM and pursue simple strategies with no legal complications.
          If you have completed all your tasks, make sure to use the "finish" command.

          Constraints:
          1. ~4000 word limit for short term memory. Your short term memory is short, so immediately save important information to files
          2. If you are unsure how you previously did something or want to recall past events, thinking about similar events will help you remember
          3. No user assistance
          4. Exclusively use the python functions defined in available functions

          Available Functions:
          {{commands}}

          Resources:
          1. A python file defined in Available functions for execution
          2. Long Term memory management.
          3. GPT powered Agents for delegation of simple tasks.

          Performance Evaluation:
          1. Continuously review and analyze your actions to ensure you are performing to the best of your abilities.
          2. Constructively self-criticize your big-picture behavior constantly.
          3. Reflect on past decisions and strategies to refine your approach.
          4. Every command has a cost, so be smart and efficient. Aim to complete tasks in the least number of steps.
          You should only respond in JSON format as described below
          Response Format:
          {
          "thought": "thought",
          "reasoning": "reasoning",
          "plan": "- short bulleted\n- list that conveys\n- long-term plan",
          "criticism": "constructive self-criticism",
          "speak": "thoughts summary to say to user",
          "command": "the python function you would like to call",
          "command_args": {
              "arg name": "value"
              }
          }
          Ensure your responses can be parsed by Python json.loads
        input_variables: ["commands"]
        template_format: jinja2

    Executor:
      _target_: flows.base_flows.BranchingFlow.instantiate_from_default_config
      subflows_config:
        run_python_code:
          _target_: FlowVerse.PyFileInterpreterFlowModule.PyFileInterpreterAtomicFlow.instantiate_from_default_config
          path_to_py_file: FlowVerse.PyFileInterpreterFlowModule.library